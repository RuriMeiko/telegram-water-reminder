import botModel from "./core";
export default class HandlerCrons extends botModel {
	private timezone: number;
	constructor(configs: any) {
		super(configs);
		this.timezone = 7;
	}
	async updateGlobalValues(id: number, time?: string) {
		// console.log("RESET GI√Å TR·ªä");
		// Khai b√°o c√°c bi·∫øn th·ªùi gian
		const WAKE_TIME = new Date();
		const SLEEP_TIME = new Date();
		const TIME_RESET = new Date();
		const CURTIME = new Date();

		const GLOBAL_INFO = await this.database
			.db("water_reminder")
			.collection("user_info")
			.findOne({
				filter: { _id: id },
			});

		const SETTING_INFO = await this.database
			.db("water_reminder")
			.collection("setting")
			.findOne({
				filter: { _id: id },
			});
		const [Whour, Wminute] = GLOBAL_INFO.document.waketime.split(":").map(Number);
		const [Shour, Sminute] = GLOBAL_INFO.document.sleeptime.split(":").map(Number);

		// Thi·∫øt l·∫≠p gi√° tr·ªã cho c√°c bi·∫øn v√† chu·∫©n ho√° m√∫i gi·ªù cho c√°c bi·∫øn th·ªùi gian
		CURTIME.setHours(CURTIME.getHours() + this.timezone);
		WAKE_TIME.setHours(WAKE_TIME.getHours() + this.timezone);
		WAKE_TIME.setHours(Whour);
		WAKE_TIME.setMinutes(Wminute);
		SLEEP_TIME.setHours(SLEEP_TIME.getHours() + this.timezone);
		SLEEP_TIME.setHours(Shour);
		SLEEP_TIME.setMinutes(Sminute);
		TIME_RESET.setHours(TIME_RESET.getHours() + this.timezone);
		TIME_RESET.setDate(TIME_RESET.getDate() + 1);
		TIME_RESET.setHours(Whour);
		TIME_RESET.setMinutes(Wminute);
		// // Debug

		// console.log("Time wake l√† ", WAKE_TIME.toLocaleString());
		// console.log("Time sleep l√† ", SLEEP_TIME.toLocaleString());
		// console.log("Time reset l√† ", TIME_RESET.toLocaleString());
		// T√≠nh th·ªùi gian th·ª©c v√† l∆∞u v√†o bi·∫øn hoursAwake
		const hoursAwake = Math.round(
			(new Date(SLEEP_TIME).getTime() - new Date(WAKE_TIME).getTime()) / (1000 * 60 * 60)
		);
		// T√≠nh to√°n l∆∞·ª£ng n∆∞·ªõc m·ªói ng√†y c·∫ßn u·ªëng theo BMI v√† l∆∞u v√†o bi·∫øn waterIntake
		let waterIntake: number;

		if (SETTING_INFO.document.autoWater)
			waterIntake = await this.tinhLuongNuocTheoBMI(
				GLOBAL_INFO.document.weight,
				GLOBAL_INFO.document.height
			);
		else waterIntake = GLOBAL_INFO.document.waterTotal;

		// T√≠nh to√°n s·ªë l·∫ßn u·ªëng n∆∞·ªõc d·ª±a tr√™n l∆∞·ª£ng n∆∞·ªõc v√† s·ªë n∆∞·ªõc m·ªói l·∫ßn u·ªëng, l∆∞u v√†o bi·∫øn numIntakes
		const numIntakes = Math.round(waterIntake / GLOBAL_INFO.document.waterDrink);
		let timeDelay: number;

		if (SETTING_INFO.document.autoTime) timeDelay = Math.round((hoursAwake / numIntakes) * 60);
		else timeDelay = GLOBAL_INFO.document.notiTime;
		let count: number = 0;
		if (time) {
			const intervalMs = timeDelay * 60 * 1000;
			count = 0;
			while (new Date(WAKE_TIME).getTime() + count * intervalMs <= CURTIME.getTime()) {
				count++;
			}
		}
		// T√≠nh to√°n kho·∫£ng c√°ch gi·ªØa c√°c gi·ªù u·ªëng n∆∞·ªõc v√† l∆∞u v√†o bi·∫øn timeDelay
		await this.database
			.db("water_reminder")
			.collection("water_info")
			.updateOne({
				filter: { _id: id },
				update: {
					$set: {
						WAKE_TIME: { $date: WAKE_TIME },
						SLEEP_TIME: { $date: SLEEP_TIME },
						TIME_RESET: { $date: TIME_RESET },
						hoursAwake: { $numberInt: hoursAwake.toString() },
						waterIntake: { $numberInt: waterIntake.toString() },
						numIntakes: { $numberInt: numIntakes.toString() },
						timeDelay: { $numberInt: timeDelay.toString() },
						count: count,
						done: false,
					},
				},
				upsert: true,
			});
	}
	// H√†m t√≠nh l∆∞·ª£ng n∆∞·ªõc c·∫ßn u·ªëng
	private async tinhLuongNuocTheoBMI(canNang: number, chieuCao: number) {
		return new Promise<number>((resolve, reject) => {
			// Chuy·ªÉn chi·ªÅu cao t·ª´ ƒë∆°n v·ªã cm sang ƒë∆°n v·ªã m√©t
			chieuCao = chieuCao / 100;
			// T√≠nh ch·ªâ s·ªë kh·ªëi c∆° th·ªÉ (BMI)
			const bmi = canNang / Math.pow(chieuCao, 2);
			// T√≠nh l∆∞·ª£ng n∆∞·ªõc c·∫ßn thi·∫øt d·ª±a tr√™n BMI
			let luongNuoc = 0;
			if (bmi < 18.5) {
				luongNuoc = canNang * 0.03;
			} else if (bmi < 25) {
				luongNuoc = canNang * 0.04;
			} else if (bmi < 30) {
				luongNuoc = canNang * 0.05;
			} else {
				luongNuoc = canNang * 0.06;
			}
			// Tr·∫£ v·ªÅ k·∫øt qu·∫£ b·∫±ng l∆∞·ª£ng n∆∞·ªõc t√≠nh ƒë∆∞·ª£c (ƒë∆°n v·ªã ml)
			resolve(luongNuoc * 1000);
		});
	}

	async handleScheduled(id: number) {
		const GLOBAL_INFO = await this.database
			.db("water_reminder")
			.collection("user_info")
			.findOne({
				filter: { _id: id },
			});
		const GLOBAL_SETTING = await this.database
			.db("water_reminder")
			.collection("setting")
			.findOne({
				filter: { _id: id },
			});
		const WATER_INFO = await this.database
			.db("water_reminder")
			.collection("water_info")
			.findOne({
				filter: { _id: id },
			});
		// H√†m t√≠nh to√°n th·ªùi gian ti·∫øp theo √∫n n∆∞·ªõc
		const getNextIntakeTime = () => {
			const intervalMs = WATER_INFO.document.timeDelay * 60 * 1000;
			let count = WATER_INFO.document.count;
			return new Date(WATER_INFO.document.WAKE_TIME).getTime() + count * intervalMs;
		};

		// H√†m g·ª≠i th√¥ng b√°o t·ªõi bbp ƒë·ªìng th·ªùi tƒÉng bi·∫øn count ƒë·ªÉ h√†m t√≠nh to√°n th·ªùi gian u·ªëng n∆∞·ªõc ƒë∆∞·ª£c thay ƒë·ªïi
		const sendNotification = async () => {
			await this.database
				.db("water_reminder")
				.collection("water_info")
				.updateOne({
					filter: { _id: id },
					update: {
						$set: { count: WATER_INFO.document.count + 1 },
					},
				});
			await this.sendMessage("U·ªëng n∆∞·ªõc ƒëi üò°", id);
		};

		// L·∫•y th·ªùi gian hi·ªán t·∫°i v√† chu·∫©n ho√° m√∫i gi·ªù sang +7
		const currentTime = new Date();
		currentTime.setHours(currentTime.getHours() + this.timezone);
		// await this.sendMessage(
		// 	`Th·ªùi gian hi·ªán t·∫°i ${id}: ${currentTime.toLocaleString()}`,
		// 	1775446945
		// );
		// console.log("Th·ªùi gian hi·ªán t·∫°i: ", currentTime.toLocaleString());
		// L·∫•y th·ªùi gian u·ªëng n∆∞·ªõc ti·∫øp theo
		const nextIntakeTime = getNextIntakeTime();
		// await this.sendMessage(
		// 	`Th·ªùi gian u·ªëng n∆∞·ªõc ${id}:  ${new Date(nextIntakeTime).toLocaleString()}`,
		// 	1775446945
		// );
		const count_check = WATER_INFO.document.count;
		// Ki·ªÉm tra n·∫øu count m√† nh·ªè h∆°n numIntakes t·ª©c l√† ch∆∞a u·ªëng ƒë·ªß n∆∞·ªõc
		const numIntakes_check = WATER_INFO.document.numIntakes;
		if (count_check < numIntakes_check) {
			// Ki·ªÉm tra n·∫øu th·ªùi gian hi·ªán t·∫°i l·ªõn h∆°n ho·∫∑c b·∫±ng th·ªùi gian u·ªëng n∆∞·ªõc
			if (currentTime.getTime() >= nextIntakeTime) {
				await sendNotification();
			}
		}
		// Ng∆∞·ª£c l·∫°i
		else {
			const water_today = WATER_INFO.document.count * GLOBAL_INFO.document.waterDrink;
			const water_need = GLOBAL_INFO.document.waterTotal;
			if (water_need <= water_today && !WATER_INFO.document.done) {
				await this.sendMessage(
					"Ch√∫c m·ª´ng, c·∫≠u ƒë√£ u·ªëng ƒë·ªß n∆∞·ªõc cho h√¥m nay üòé\nH√£y c·ªë g·∫Øng v√†o ng√†y mai nh√©!ü•≥",
					id
				);
				await this.database
					.db("water_reminder")
					.collection("water_info")
					.updateOne({
						filter: { _id: id },
						update: {
							$set: {
								done: true,
							},
						},
						upsert: true,
					});
				if (GLOBAL_SETTING.document.wake)
					await this.database
						.db("water_reminder")
						.collection("setting")
						.updateOne({
							filter: { _id: this.message.from.id },
							update: { $set: { status: false } },
						});
				const TIME_RESET = new Date(WATER_INFO.document.TIME_RESET);
				// So s√°nh n·∫øu th·ªùi gian hi·ªán t·∫°i >= th·ªùi gian bbp th·ª©c d·∫≠y s·ªõm h∆°n 10 ph√∫t
				if (currentTime.getTime() >= TIME_RESET.getTime() - 600000) {
					// Reset c√°c gi√° tr·ªã, update l·∫°i ng√†y th√°ng cho c√°c bi·∫øn th·ªùi gian
					await this.updateGlobalValues(id);
				}
			}
		}
	}
}
